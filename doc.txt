Link to setup RPi k8s cluster: https://www.youtube.com/watch?v=B2wAJ5FLOYw

DB Schema
---------

1. Create database:
Query:
    CREATE DATABASE dbSL

2. tblCategory    
Columns:
    a. cid: Int, Unique, Primary
    b. name: String
Query:
    CREATE TABLE `tblcategory` (
	`cid` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	PRIMARY KEY (`cid`) USING BTREE
    );
Endpoints:
    a. POST <BASE_URL>/v1/categories - Insert new category
    b. GET <BASE_URL>/v1/categories - Get all categories    
    c. GET <BASE_URL>/v1/categories/{cid} - Get category
    d. PUT <BASE_URL>/v1/categories/{cid} - Update category
    e. DELETE <BASE_URL>/v1/categories/{cid} - Delete category

2. tblChannel
Columns:
    a. chid: Int, Unique, Primary
    b. name: String
    c. logo: String
    d. cid: Int
    e. active: bool
Query:
    CREATE TABLE `tblchannel` (
	`id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
	`cid` SMALLINT(5) UNSIGNED NOT NULL DEFAULT '0',
	`number` SMALLINT(5) UNSIGNED NOT NULL DEFAULT '0',
	`name` VARCHAR(20) NOT NULL DEFAULT '0',
	`logo` VARCHAR(50) NULL DEFAULT '0',
	PRIMARY KEY (`id`) USING BTREE
    );
Endpoints:
    a. POST <BASE_URL>/v1/channels - Insert new channel 
    b. GET <BASE_URL>/v1/channels - Get all channels
    c. GET <BASE_URL>/v1/channels/category/{cid} - Get all channels belongs to category
    d. GET <BASE_URL>/v1/channels/{chid}/number - Get channel by number
    e. GET <BASE_URL>/v1/channels/{name}/name - Get channel by name    
    f. PUT <BASE_URL>/v1/channels/{chid} - Update channel
    g. DELETE <BASE_URL>/v1/channels/{chid} - Delete channel

3. tblDeviceTopic
Columns:
    a. id: Int, Unique, Primary
    b. device: String
    c. topic: String
    d. active: bool

Query:
    CREATE TABLE `tbldevicetopic` (
	`id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
	`dev_id` SMALLINT(5) UNSIGNED NOT NULL DEFAULT '0',
	`topic` VARCHAR(20) NOT NULL,
	PRIMARY KEY (`id`) USING BTREE
    );

Endpoints:
    a. POST <BASE_URL>/v1/devtops - Insert new device topic mapping
    b. GET <BASE_URL>/v1/devtops - Get all device topic mapping
    c. GET <BASE_URL>/v1/devtops/{device} - Get topic by device
    f. PUT <BASE_URL>/v1/devtops/{device} - Update topic by device
    g. DELETE <BASE_URL>/v1/devtops/{device} - Delete topic by device

3. tblCommand
Columns:
    a. id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    a. cid: String,
    b. key: String,
    c. active: bool
Query:
    CREATE TABLE `tblcommand` (
	`id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
	`dev_id` SMALLINT(5) UNSIGNED NOT NULL DEFAULT '0',
	`cmd` VARCHAR(20) NOT NULL DEFAULT '0',
	`keys` VARCHAR(40) NOT NULL DEFAULT '0',
	PRIMARY KEY (`id`) USING BTREE
);
Endpoints:
    a. POST <BASE_URL>/v1/commands - Insert new command 
    b. GET <BASE_URL>/v1/commands - Get all commands    
    c. GET <BASE_URL>/v1/commands/{cid}/cid - Get command by id
    d. GET <BASE_URL>/v1/commands/{key}/key - Get command by key    
    e. PUT <BASE_URL>/v1/channels/{cid} - Update command
    f. DELETE <BASE_URL>/v1/channels/{cid} - Delete command

4. tbldevices
    CREATE TABLE `tbldevices` (
	`id` TINYINT(3) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(20) NOT NULL DEFAULT '0',
	`type` VARCHAR(20) NOT NULL DEFAULT '0',
	`description` VARCHAR(50) NULL DEFAULT '0',
	`manufacturer` VARCHAR(20) NULL DEFAULT '0',
	`logo_path` VARCHAR(50) NULL DEFAULT '0',
	PRIMARY KEY (`id`) USING BTREE
);


Eg. Publish command
{
    "topic": "/cbr/fan1",
    "msg": [
        {
            "cmd": "ON",
            "cron": "30 23 * * *",
            "tag": ""
        },
        {
            "cmd": "OFF",
            "cron": "30 6 * * *",
            "tag": ""
        }
    ]
}

Docker xbuild:
docker buildx build --push --platform linux/arm/v7 --tag rsharnagate/sl-rest:rpi .

MySQL details
----------------
PUID:                 1000
PGID:                 1000
TZ:                   Asia/Calcutta
MYSQL_ROOT_PASSWORD:  my-root-password
MYSQL_DATABASE:       dbSL
MYSQL_USER:           my-user
MYSQL_PASSWORD:       my-password

---------------------------------------

kubectl run -i --tty --rm debug --image=busybox --restart=Never -- sh

---------------------------------------
Create private registry credential

kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=rsharnagate --docker-password=Sam123456#$ --docker-email=rakesh.sharnagate@gmail.com

-----------------------------
Get bash

kubectl exec -t -i nginx-78f5d695bd-czm8z bash

-----------------------------------------------------------

 sudo ssh -L 8001:127.0.0.1:8001 pi@192.168.1.100  

Name:         admin-user-token-2tfwg
Namespace:    kubernetes-dashboard
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: 1bb8b4a0-3930-49e7-96d1-c41820714de2

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  20 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjhoUDM1VXh4dkZaZTVTemJ1R1NxSmh0a2hqNENFOWtMc0JTT0FMQ3pSeEUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTJ0ZndnIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxYmI4YjRhMC0zOTMwLTQ5ZTctOTZkMS1jNDE4MjA3MTRkZTIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.MeVPSSnAPORSIfe92taXZKDKuBiWX2MayCSOxrkyrFnvJ96Kpe0DJwFmBCOjHYjlRSiG6-tXlNb8r_sAaJulFCtbhcUEr130brErPMy56rETzMSudoQaj26LFLhls0zGkduVTcujD26OyWPrM7IHY2XlAyfUTv5rZoNR-faZHF_7DP8PQosDigKH4XifmqZuOZ1L0ZoLEpI80XDCUP5zHvOu2Yxo1GxWRLvn_Whx_rSuM2oRNKsQqzSjh2voJwdQECcnsxgjqSLrbK5cvZwHqo9VNA-xHOfvB3F_o5ZW51wYC5Lfy14rimB8qKs-zZxRN5oh74oPIF53Nsw3Xncleg
